version: 2.1
parameters:
  # Increment these to force cache rebuilding
  go-mod-cache-version:
    type: integer
    default: 2
  monorepo-build-cache-version:
    type: integer
    default: 2
  system-contracts-path:
    type: string
    default: "compiled-system-contracts"
  monreopo-build-executor-image:
    type: string
      # The system contracts executor currently needs node 12 to function,
      # this should only be changed when the version in `monorepo_commit` is
      # changed.
    default: "us.gcr.io/celo-testnet/circleci-node12:1.0.0"
executors:
  golang:
    docker:
      - image: circleci/golang:1.16
    environment:
      # Change the go modules to be cached under ~/repos so that we can add
      # them to the workspace
      GOMODCACHE: ~/repos/gomodcache
    working_directory: ~/repos/geth
  monorepo-build-executor:
    docker:
      - image: <<pipeline.parameters.monreopo-build-executor-image>>
    working_directory: ~/repos
  e2e:
    docker:
      - image: us.gcr.io/celo-testnet/circleci-node12:1.0.0
    working_directory: ~/repos/celo-monorepo/packages/celotool
    environment:
      GITHUB_RSA_FINGERPRINT: SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8
# Unfortunately we cannot use anchors to represent a set of standard steps and
# then add or override one or more of those steps when referencing the anchor.
# This would be useful because a lot of jobs share many steps, it is not
# possible because anchors can be used to represent dictionaries but not
# sequences, and steps are defined as a sequence. So we are limited here to only
# reusing a small segment of our jobs. See this link for a discussion of this limitation.
# https://stackoverflow.com/questions/4948933/is-there-a-way-to-alias-anchor-an-array-in-yaml
unit-tests-defaults: &unit-tests-defaults
  executor: golang
  resource_class: medium+

jobs:
  go-modules:
    executor: golang
    resource_class: small
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
      - run: go mod download
      - save_cache:
          key: go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
          paths:
            - ~/repos/gomodcache
      - persist_to_workspace:
          root: ~/repos
          paths:
            - gomodcache

  build-geth:
    executor: golang
    resource_class: medium+
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
      - run:
          name: Build Geth
          command: go run build/ci.go install
      - save_cache:
          key: go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth

  monorepo-build:
    parameters:
      cache-key:
        type: string
        default: monorepo-build-{{ checksum "geth/monorepo_commit" }}-v<<pipeline.parameters.monorepo-build-cache-version>>-<<pipeline.parameters.monorepo-build-executor-image>>
    executor: monorepo-build-executor
    resource_class: medium+
    steps:
      - checkout:
          path: geth
      - restore_cache:
          keys:
            - <<parameters.cache-key>>
      - attach_workspace:
          at: ~/repos
      - run:
          name: monorepo-build
          # Runs make prepare-system-contracts which will checkout the monorepo at
          # the version defined in the monorepo_commit file at the blockchain
          # repo root and build the system contracts.  Then builds celotool for use in
          # the monorepo e2e tests. The results of this are then persisted to
          # the workspace. Although we could separate these 2 operations
          # keeping them as one allows us to avoid duplicating any special
          # requirements to work with the monorepo. (eg special git config... etc)
          command: |
            set -e
            cd geth
            if [ ! -d <<pipeline.parameters.system-contracts-path>> ]; then
              # Github is phasing out the git protocol so we ensure that we use
              # https for all git operations that yarn may perform. Yarn is used by
              # the prepare-system-contracts make rule since it partially builds celo-monorepo.
              git config --global url."https://github.com".insteadOf git://github.com

              # Add the fingerprint id for the github ssh key to our known
              # hosts in order for the monorepo post install script to work.
              mkdir ~/.ssh && ssh-keyscan github.com >> ~/.ssh/known_hosts
              make prepare-system-contracts MONOREPO_PATH=../celo-monorepo #checkout the monorepo as sibling
              cd ../celo-monorepo
              yarn build --scope @celo/celotool --include-filtered-dependencies
            fi
      - save_cache:
          key: <<parameters.cache-key>>
          paths:
            - ~/repos/celo-monorepo
            - ~/repos/geth/<<pipeline.parameters.system-contracts-path>>
      - persist_to_workspace:
          root: ~/repos
          paths:
            - celo-monorepo
            - geth/<<pipeline.parameters.system-contracts-path>>


  # Install golang and persist it to the workspace
  install-go:
    parameters:
      go-version:
        type: string
        default: "1.16.4"
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: Setup Go language
          command: |
            mkdir -p ~/repos/golang
            wget https://dl.google.com/go/go<<parameters.go-version>>.linux-amd64.tar.gz
            tar xf go<<parameters.go-version>>.linux-amd64.tar.gz -C ~/repos/golang
            ~/repos/golang/go/bin/go version
      - persist_to_workspace:
          root: ~/repos
          paths:
            - golang

  race:
    <<: *unit-tests-defaults
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-results
            trap "go-junit-report < /tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
            go test -p 1 -v -race ./... | tee /tmp/test-results/go-test.out
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  unit-tests:
    <<: *unit-tests-defaults
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Run tests
          command: |
            mkdir -p /tmp/test-results
            trap "go-junit-report < /tmp/test-results/go-test.out > /tmp/test-results/go-test-report.xml" EXIT
            go test -v -cover -coverprofile=coverage.out ./... | tee /tmp/test-results/go-test.out
            bash <(curl -s https://codecov.io/bash)
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  istanbul-e2e-coverage:
    <<: *unit-tests-defaults
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
        # Run the tests with coverage parse the coverage and output the summary
      - run: 
          name: Run tests and print coverage summary
          command: |
            go test -coverprofile cov.out -coverpkg ./consensus/istanbul/... ./e2e_test 
            go run tools/parsecov/main.go -packagePrefix github.com/celo-org/celo-blockchain/ cov.out > summary
            cat summary

      - run: 
          name: Post summary comment on PR
          command: |
            # Only post on PR if this build is running on a PR. If this build
            # is running on a PR then CIRCLE_PULL_REQUEST contains the link to
            # the PR.
            if [[ -z ${CIRCLE_PULL_REQUEST} ]] ; then
              exit 0
            fi

            # Generate per PR MARKER for this comment.
            COMMENT_MARKER=`echo ${CIRCLE_PULL_REQUEST}| shasum | head -c 10`

            line1=`head -n 1 summary`
            remainder=`tail -n +2 summary`

            # Build comment
            echo "Coverage from tests in \`./e2e_test/...\` for \`./consensus/istanbul/...\` at commit ${CIRCLE_SHA1}" > comment
            echo "<details><summary>${line1}</summary><br>" >> comment
            echo "<pre>" >> comment
            echo "${remainder}" >> comment
            echo "</pre>" >> comment
            # Add a per PR unique ID to the comment
            echo "CommentID: `echo ${COMMENT_MARKER}`" >> comment
            echo "</details>" >> comment

            # This expansion deletes everything up to and including the final slash
            # leaving just the PR ID.
            PR_ID=${CIRCLE_PULL_REQUEST##*/}

            # Note all the api paths here seem to be referencing issue comments
            # rather than pr comments, but this is correct, since github's
            # definition of an issue comment is a comment not attached to a
            # review or attached to a specific section of code.

            # This command grabs the list of comments for this PR and selects
            # the id of the first one that contains the comment marker in its
            # body, jq returns 'null' when it doesn't find anything.
            COMMENT_ID=`curl https://api.github.com/repos/celo-org/celo-blockchain/issues/${PR_ID}/comments | jq "[.[] | select(.body | contains(\"${COMMENT_MARKER}\"))][0]| .id"`

            # Determine if we are posting  a new comment or patching an
            # existing one.
            if [[ $COMMENT_ID == "null" ]]; then
              # There was no previous comment
              CURL_VERB=POST
              URL=https://api.github.com/repos/celo-org/celo-blockchain/issues/${PR_ID}/comments
            else
              # We are updating a previous comment
              CURL_VERB=PATCH
              URL=https://api.github.com/repos/celo-org/celo-blockchain/issues/comments/${COMMENT_ID}
            fi

            # This command is quite involved, it's posting the comment on the
            # associated PR.
            # "{\"body\":\"`awk -v ORS='\\\\n' '1' comment`\"}" evaluates to
            # a json object with comment as the content of body with newlines
            # replaced by '\n'. Using backtics causes there to be a round of
            # backslash processing on the command before execution, so we
            # need to double the backslashes in the awk command.
            curl -u piersy:${PR_COMMENT_TOKEN} -X ${CURL_VERB} $URL -d "{\"body\":\"`awk -v ORS='\\\\n' '1' comment`\"}" ;

  e2e-benchmarks:
    executor: golang
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/repos
      - restore_cache:
          keys:
            - go-mod-<<pipeline.parameters.go-mod-cache-version>>-{{ checksum "go.sum" }}
      - run:
          name: Run benchmarks
          command: |
            mkdir -p /tmp/bench-results
            trap "grep -E 'goos: |^goarch: |^pkg: |^cpu: |^Benchmark' /tmp/bench-results/go-bench.out > /tmp/bench-results/go-bench-results.txt" EXIT
            go test ./e2e_test -run Bench -bench . | tee /tmp/bench-results/go-bench.out
      - store_artifacts:
          path: /tmp/bench-results

  lint:
    executor: golang
    resource_class: medium+
    steps:
      - attach_workspace:
          at: ~/repos
      - run: go get github.com/jstemmer/go-junit-report
      - run:
          name: Run Linter
          command: |
            mkdir -p /tmp/test-results
            go run build/ci.go ensure-linter
            ./build/cache/golangci-lint-1.39.0-linux-amd64/golangci-lint run --config .golangci.yml --out-format junit-xml ./... | tee /tmp/test-results/go-lint-report.xml
      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output
      - store_test_results:
          path: /tmp/test-results

  check-imports:
    executor: golang
    steps:
      - checkout
      - run:
          name: Check imports to ensure we are using github.com/celo-org/celo-blockchain
          command: ./scripts/check_imports.sh

  android:
    docker:
      - image: us.gcr.io/celo-testnet/android:v3
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Compile android client
          command: make android
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/geth.aar

  ios:
    macos:
      xcode: "12.5.1"
    working_directory: ~/repos/geth
    steps:
      - checkout
      - run:
          name: Setup Go language
          command: |
            brew install go@1.16
            brew link go@1.16
            # Check that homebrew installed the expected go version
            if [[ "$(go version)" != "go version go1.16"* ]]; then
              echo "go1.16 is required"
              exit 1
            fi
      - run:
          name: Compile ios client
          command: make ios
      - persist_to_workspace:
          root: ~/repos
          paths:
            - geth/build/bin/Geth.framework.tgz
            - geth/libbls_snark_sys.a

  publish-mobile-client:
    docker:
      - image: circleci/node:10
    working_directory: ~/repos/geth
    steps:
      - attach_workspace:
          at: ~/repos
      - run: ./scripts/publish-mobile-client.sh ${CIRCLE_SHA1} ${NPM_TOKEN_FOR_CELO_CLIENT}

  lightest-sync-test:
    executor: golang
    steps:
      - attach_workspace:
          at: ~/repos
      - run: DATADIR=/tmp/lightest_sync_test_data MODE=lightest ./scripts/sync_test.sh

  end-to-end-blockchain-parameters-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of governable blockchain parameters
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_blockchain_parameters.sh local ~/repos/geth

  end-to-end-governance-test:
    executor: e2e
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of proof-of-stake
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_governance.sh local ~/repos/geth

  end-to-end-sync-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of syncing
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_sync.sh local ~/repos/geth

  end-to-end-slashing-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of slashing
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_slashing.sh local ~/repos/geth

  end-to-end-transfer-test:
    executor: e2e
    resource_class: large
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of transfers
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_transfers.sh local ~/repos/geth

  end-to-end-validator-order-test:
    executor: e2e
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of random validator order
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_validator_order.sh local ~/repos/geth

  end-to-end-cip35-eth-compatibility-test:
    executor: e2e
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of CIP 35
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_cip35.sh local ~/repos/geth

  end-to-end-replica-test:
    executor: e2e
    resource_class: xlarge
    steps:
      - attach_workspace:
          at: ~/repos
      - run:
          name: End-to-end test of hotswap functionality
          no_output_timeout: 15m
          command: |
            export PATH=${PATH}:~/repos/golang/go/bin
            ./ci_test_replicas.sh local ~/repos/geth

workflows:
  version: 2
  build:
    jobs:
      - go-modules
      - monorepo-build
      - build-geth:
          requires:
            - go-modules
      - install-go
      - check-imports
      - lint:
          requires:
            - build-geth
      - unit-tests:
          requires:
            - build-geth
            - monorepo-build
      - race:
          filters:
            branches:
              only: /master|release.*/
          requires:
            - build-geth
            - monorepo-build
      - istanbul-e2e-coverage:
          requires:
            - build-geth
            - monorepo-build
      - e2e-benchmarks:
          requires:
            - build-geth
            - monorepo-build
      - android
      - ios
      - publish-mobile-client:
          requires:
            - android
            - ios
            # Makes sure tests are all green before publishing
            # Though these are not using the mobile built binaries
            # they should be a good indicator
            - unit-tests
            - lightest-sync-test
            - end-to-end-blockchain-parameters-test
            - end-to-end-governance-test
            - end-to-end-slashing-test
            - end-to-end-sync-test
            - end-to-end-transfer-test
            - end-to-end-validator-order-test
          filters:
            branches:
              only: master
      - lightest-sync-test:
          requires:
            - build-geth
      - end-to-end-blockchain-parameters-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
      - end-to-end-governance-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
      - end-to-end-slashing-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
      - end-to-end-sync-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
      - end-to-end-transfer-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
      - end-to-end-validator-order-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
# Flaky!
#      - end-to-end-cip35-eth-compatibility-test:
#          requires:
#            - checkout-monorepo
#            - build-geth
      - end-to-end-replica-test:
          requires:
            - monorepo-build
            - build-geth
            - install-go
